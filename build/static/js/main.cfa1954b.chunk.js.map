{"version":3,"sources":["Components/Note.js","Services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","Axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","returnedData","notesToShow","filter","toggleImportanceOf","find","changedNote","returnedNote","map","catch","error","alert","n","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"8LAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACI,4BACKH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,K,gBCkBjC,EAtBA,WASX,OARgBI,IAAMC,IAHb,aAWMC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAfb,YAe2BD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UApBP,YAoBO,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCsD9BK,EAxEH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,KAKdC,qBAAU,WACNC,IAAqBhB,MAAK,SAAAiB,GACtBP,EAASO,QAEd,IAEH,IAAMC,EAAcL,EAAUJ,EAAQA,EAAMU,QAAO,SAAA3B,GAAI,OAAIA,EAAKG,aAc1DyB,EAAqB,SAAAf,GACvB,IAAMb,EAAOiB,EAAMY,MAAK,SAAA7B,GAAI,OAAIA,EAAKa,KAAOA,KACtCiB,EAAW,eAAQ9B,EAAR,CAAcG,WAAYH,EAAKG,YAChDqB,EACYxB,EAAKa,GAAIiB,GAChBtB,MAAK,SAAAuB,GAAY,OACdb,EACID,EAAMe,KAAI,SAAAhC,GAAI,OAAKA,EAAKa,KAAOA,EAAKb,EAAO+B,SAGlDE,OAAM,SAAAC,GACHC,MAAM,aAAD,OACYnC,EAAKI,QADjB,sCAGLc,EAASD,EAAMU,QAAO,SAAAS,GAAC,OAAIA,EAAEvB,KAAOA,UAgBhD,OACI,6BACI,qCACA,6BACI,4BAAQR,QAAS,kBAAMiB,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BAjDJK,EAAYM,KAAI,SAAAhC,GAAI,OAChB,kBAAC,EAAD,CACIA,KAAMA,EACNC,iBAAkB,kBAAM2B,EAAmB5B,EAAKa,WA+CpD,0BAAMwB,SAtBE,SAAAC,GACZA,EAAMC,iBACN,IAAMC,EAAa,CACfpC,QAASe,EACTsB,MAAM,IAAIC,MAAOC,cACjBxC,UAAWyC,KAAKC,SAAW,IAE/BrB,EAAmBgB,GAAYhC,MAAK,SAAAuB,GAChCb,EAASD,EAAM6B,OAAOf,IACtBX,EAAW,SAcP,2BAAO2B,MAAO5B,EAAS6B,SA5CV,SAAAV,GACrBlB,EAAWkB,EAAMW,OAAOF,UA4ChB,4BAAQG,KAAK,UAAb,WClEhBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.cfa1954b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? \"make not important\" : \"make important\";\n    return (\n        <li>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    );\n};\n\nexport default Note;\n","import Axios from \"axios\";\nconst baseURL = `api/notes`;\n\nconst getAll = () => {\n    const request = Axios.get(baseURL);\n    // const nonExisting = {\n    //     id: 10000,\n    //     content: \"This note is not saved to server\",\n    //     date: \"2019-05-30T17:30:31.098Z\",\n    //     important: true\n    // };\n    // return request.then(response => response.data.concat(nonExisting));\n    return request.then(response => response.data);\n};\n\nconst create = newObject => {\n    const request = Axios.post(baseURL, newObject);\n    return request.then(response => response.data);\n};\n\nconst update = (id, newObject) => {\n    const request = Axios.put(`${baseURL}/${id}`, newObject);\n    return request.then(response => response.data);\n};\n\nexport default {\n    getAll,\n    create,\n    update\n};\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./Components/Note\";\nimport noteService from \"./Services/notes\";\n\nconst App = () => {\n    const [notes, setNotes] = useState([]);\n    const [newNote, setNewNote] = useState(\"\");\n    const [showAll, setShowAll] = useState(true);\n\n    useEffect(() => {\n        noteService.getAll().then(returnedData => {\n            setNotes(returnedData);\n        });\n    }, []);\n\n    const notesToShow = showAll ? notes : notes.filter(note => note.important);\n\n    const rows = () =>\n        notesToShow.map(note => (\n            <Note\n                note={note}\n                toggleImportance={() => toggleImportanceOf(note.id)}\n            />\n        ));\n\n    const handleNoteChange = event => {\n        setNewNote(event.target.value);\n    };\n\n    const toggleImportanceOf = id => {\n        const note = notes.find(note => note.id === id);\n        const changedNote = { ...note, important: !note.important };\n        noteService\n            .update(note.id, changedNote)\n            .then(returnedNote =>\n                setNotes(\n                    notes.map(note => (note.id !== id ? note : returnedNote))\n                )\n            )\n            .catch(error => {\n                alert(\n                    `the note '${note.content}' was already deleted from server`\n                );\n                setNotes(notes.filter(n => n.id !== id));\n            });\n    };\n    const addNote = event => {\n        event.preventDefault();\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.5\n        };\n        noteService.create(noteObject).then(returnedNote => {\n            setNotes(notes.concat(returnedNote));\n            setNewNote(\"\");\n        });\n    };\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? \"important\" : \"all\"}\n                </button>\n            </div>\n            <ul>{rows()}</ul>\n            <form onSubmit={addNote}>\n                <input value={newNote} onChange={handleNoteChange} />\n                <button type=\"submit\">save</button>\n            </form>\n        </div>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}