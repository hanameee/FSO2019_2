{"version":3,"sources":["Components/Note.js","Services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseURL","request","Axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","returnedData","notesToShow","filter","toggleImportanceOf","find","changedNote","returnedNote","map","catch","error","alert","n","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"8LAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACI,4BACKH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,K,gBCN1CI,EAAO,8BAuBE,EArBA,WACX,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAChBC,GAAI,IACJP,QAAS,mCACTQ,KAAM,2BACNT,WAAW,GAEf,OAAOI,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAa1C,EAVA,SAAAO,GAEX,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACJ,EAAIM,GAEhB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCuD9BK,EAxEH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,KAKdC,qBAAU,WACNC,IAAqBhB,MAAK,SAAAiB,GACtBP,EAASO,QAEd,IAEH,IAAMC,EAAcL,EAAUJ,EAAQA,EAAMU,QAAO,SAAAhC,GAAI,OAAIA,EAAKG,aAc1D8B,EAAqB,SAAAtB,GACvB,IAAMX,EAAOsB,EAAMY,MAAK,SAAAlC,GAAI,OAAIA,EAAKW,KAAOA,KACtCwB,EAAW,eAAQnC,EAAR,CAAcG,WAAYH,EAAKG,YAChD0B,EACY7B,EAAKW,GAAIwB,GAChBtB,MAAK,SAAAuB,GAAY,OACdb,EACID,EAAMe,KAAI,SAAArC,GAAI,OAAKA,EAAKW,KAAOA,EAAKX,EAAOoC,SAGlDE,OAAM,SAAAC,GACHC,MAAM,aAAD,OACYxC,EAAKI,QADjB,sCAGLmB,EAASD,EAAMU,QAAO,SAAAS,GAAC,OAAIA,EAAE9B,KAAOA,UAgBhD,OACI,6BACI,qCACA,6BACI,4BAAQN,QAAS,kBAAMsB,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BAjDJK,EAAYM,KAAI,SAAArC,GAAI,OAChB,kBAAC,EAAD,CACIA,KAAMA,EACNC,iBAAkB,kBAAMgC,EAAmBjC,EAAKW,WA+CpD,0BAAM+B,SAtBE,SAAAC,GACZA,EAAMC,iBACN,IAAMC,EAAa,CACfzC,QAASoB,EACTZ,MAAM,IAAIkC,MAAOC,cACjB5C,UAAW6C,KAAKC,SAAW,IAE/BpB,EAAmBgB,GAAYhC,MAAK,SAAAuB,GAChCb,EAASD,EAAMN,OAAOoB,IACtBX,EAAW,SAcP,2BAAOyB,MAAO1B,EAAS2B,SA5CV,SAAAR,GACrBlB,EAAWkB,EAAMS,OAAOF,UA4ChB,4BAAQG,KAAK,UAAb,WClEhBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.30721ca3.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? \"make not important\" : \"make important\";\n    return (\n        <li>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    );\n};\n\nexport default Note;\n","import Axios from \"axios\";\nconst baseURL = `http://localhost:3001/notes`;\n\nconst getAll = () => {\n    const request = Axios.get(baseURL);\n    const nonExisting = {\n        id: 10000,\n        content: \"This note is not saved to server\",\n        date: \"2019-05-30T17:30:31.098Z\",\n        important: true\n    };\n    return request.then(response => response.data.concat(nonExisting));\n};\n\nconst create = newObject => {\n    const request = Axios.post(baseURL, newObject);\n    return request.then(response => response.data);\n};\n\nconst update = (id, newObject) => {\n    const request = Axios.put(`${baseURL}/${id}`, newObject);\n    return request.then(response => response.data);\n};\n\nexport default {\n    getAll,\n    create,\n    update\n};\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./Components/Note\";\nimport noteService from \"./Services/notes\";\n\nconst App = () => {\n    const [notes, setNotes] = useState([]);\n    const [newNote, setNewNote] = useState(\"\");\n    const [showAll, setShowAll] = useState(true);\n\n    useEffect(() => {\n        noteService.getAll().then(returnedData => {\n            setNotes(returnedData);\n        });\n    }, []);\n\n    const notesToShow = showAll ? notes : notes.filter(note => note.important);\n\n    const rows = () =>\n        notesToShow.map(note => (\n            <Note\n                note={note}\n                toggleImportance={() => toggleImportanceOf(note.id)}\n            />\n        ));\n\n    const handleNoteChange = event => {\n        setNewNote(event.target.value);\n    };\n\n    const toggleImportanceOf = id => {\n        const note = notes.find(note => note.id === id);\n        const changedNote = { ...note, important: !note.important };\n        noteService\n            .update(note.id, changedNote)\n            .then(returnedNote =>\n                setNotes(\n                    notes.map(note => (note.id !== id ? note : returnedNote))\n                )\n            )\n            .catch(error => {\n                alert(\n                    `the note '${note.content}' was already deleted from server`\n                );\n                setNotes(notes.filter(n => n.id !== id));\n            });\n    };\n    const addNote = event => {\n        event.preventDefault();\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.5\n        };\n        noteService.create(noteObject).then(returnedNote => {\n            setNotes(notes.concat(returnedNote));\n            setNewNote(\"\");\n        });\n    };\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? \"important\" : \"all\"}\n                </button>\n            </div>\n            <ul>{rows()}</ul>\n            <form onSubmit={addNote}>\n                <input value={newNote} onChange={handleNoteChange} />\n                <button type=\"submit\">save</button>\n            </form>\n        </div>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}